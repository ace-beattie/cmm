use crate::filesys::create_relative_path;

use std::io::prelude::*;
use std::{fs::File, path::PathBuf};

pub fn create_makefile(
    source_paths: &Vec<PathBuf>,
    out_dir: &PathBuf,
    cur_dir: &PathBuf,
    outfile_name: &str,
    place_out_in_root: bool,
) {
    let mut buffer = File::create("makefile").unwrap();

    let source_paths_rel: Vec<PathBuf> = source_paths
        .iter()
        .map(|source_path| create_relative_path(source_path, &cur_dir))
        .collect();

    let out_dir_rel = create_relative_path(&out_dir, &cur_dir);
    let out_dir_rel_string = out_dir_rel.to_string_lossy();

    write!(buffer, "# This file was generated by CMM\n\n").unwrap();

    let obj_paths: Vec<String> = source_paths_rel
        .iter()
        .map(|source_path| {
            let obj_path: PathBuf = [
                out_dir_rel.as_os_str(),
                source_path.with_extension("o").file_name().unwrap(),
            ]
            .iter()
            .collect();

            let obj_path_string = obj_path.to_str().unwrap().to_string();

            obj_path_string
        })
        .collect();

    let all_objs = obj_paths.join(" ");

    let outfile_path;

    outfile_path = if place_out_in_root {
        outfile_name.to_string()
    } else {
        let outfile_path = out_dir_rel.join(outfile_name);
        outfile_path.to_string_lossy().to_string()
    };

    write!(
        buffer,
        "all: {} {}\n\tgcc {} -o {}\n\n",
        out_dir_rel_string, all_objs, all_objs, outfile_path
    )
    .unwrap();

    for (i, object_file) in obj_paths.iter().enumerate() {
        let source_path_relative_string = source_paths_rel[i].to_string_lossy();

        write!(
            buffer,
            "{}: {} {}\n\t {} -c {} -o {}\n\n",
            object_file,
            out_dir_rel_string,
            source_path_relative_string,
            if source_path_relative_string.ends_with(".cpp") {
                "g++"
            } else {
                "gcc"
            },
            source_path_relative_string,
            object_file
        )
        .unwrap();
    }

    write!(
        buffer,
        "{}:\n\tmkdir {}\n\n",
        out_dir_rel_string, out_dir_rel_string
    )
    .unwrap();

    write!(buffer, "clean:\n\trm -rf {}\n\n", out_dir_rel_string).unwrap();

    write!(buffer, "run: all\n\t{}\n\n", outfile_path).unwrap();

    write!(buffer, ".PHONY: all clean run").unwrap();

    println!("Makefile created!");
}
