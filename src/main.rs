use std::io::prelude::*;
use std::{
    env,
    fs::{self, File},
    path::PathBuf,
};

fn main() {
    let args: Vec<String> = env::args().collect();

    let dir: String;

    if args.len() < 2 {
        dir = env::current_dir().unwrap().to_str().unwrap().to_string();
    } else {
        dir = PathBuf::from(&args[1])
            .canonicalize()
            .unwrap()
            .to_str()
            .unwrap()
            .to_string();
    }

    let c_files: Vec<String> = fs::read_dir(&dir)
        .unwrap()
        .map(|e| e.unwrap())
        .filter(|entry| {
            let path = entry.path();
            let file_type = entry.file_type().unwrap();
            let extension = path.extension().unwrap_or("".as_ref()).to_str().unwrap();

            file_type.is_file() && extension == "c"
        })
        .map(|entry| {
            entry
                .path()
                .file_name()
                .unwrap()
                .to_str()
                .unwrap()
                .to_string()
        })
        .collect();

    create_makefile(&c_files);
}

fn create_makefile(c_files: &Vec<String>) {
    let mut buffer = File::create("makefile").unwrap();

    write!(
        buffer,
        "# This file was generated by the Rust Makefile Generator\n\n"
    )
    .unwrap();

    let object_files: Vec<String> = c_files
        .iter()
        .map(|file| {
            let mut object_file = file.clone().split('.').next().unwrap().to_string();
            object_file.push_str(".o");

            object_file = "out/".to_string() + &object_file;

            object_file
        })
        .collect();

    let joined = object_files.join(" ");

    write!(buffer, "all: out {}\n\tgcc {}\n\n", joined, joined).unwrap();

    for (i, object_file) in object_files.iter().enumerate() {
        write!(
            buffer,
            "{}: out {}\n\t gcc {} -o {}\n\n",
            object_file, c_files[i], c_files[i], object_file
        )
        .unwrap();
    }

    write!(buffer, "out:\n\tmkdir out\n\n").unwrap();

    write!(buffer, "clean:\n\trm -rf out\n\n").unwrap();

    write!(buffer, "run: all\n\t./a.out\n\n").unwrap();

    write!(buffer, ".PHONY: all clean run").unwrap();

    println!("Makefile created!");
}
